on:
    workflow_call:
      inputs:
        testvar:
          required: true
          type: string
        apiversion:
            required: true
            type: string

jobs:

  SFDX_Build_DeployDelta:
    runs-on: ubuntu-latest
    env:
        SalesforcePath: "/nachotest"
    steps:
      - run: pwd
      - name: Checkout python libraries
        uses: actions/checkout@v3
        with:
          repository: Accenture/ALM-SF-DX-Python-Tools
          path: pythonlib
      - name: Checkout code repo
        uses: actions/checkout@v3
        with:
          path: sfrepo

      #IGNORE Paso 1 obtener algunos valores desde el contexto, como sourcebranch, destinationbranch, (como estan en el contexto obtenerlas cuando las necesite)
      #Paso 2 configurar git y checkout python,carpetas donde trabajar
      #[FATAL] Both 'user.name' and 'user.email' configuration keys must be set up, exiting...
      - run: |
            git -v
            git config --global user.name "Github Actions"
            git config --global user.email "devops@accenture.com"
      
      #Paso 3 install sfdx, install python and requirements, 
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Salesforce CLI
        run: |
              wget https://developer.salesforce.com/media/salesforce-cli/sfdx-cli/channels/stable/sfdx-cli-linux-x64.tar.xz
              mkdir sfdx-cli
              tar xJf sfdx-cli-linux-x64.tar.xz -C sfdx-cli --strip-components 1
              ./sfdx-cli/install
      - name: Setup Python
        uses: actions/setup-python@v3.1.4
        with:
            python-version: '3.7' 
            cache: 'pip' # caching pip dependencies
      - run: pip install -r pythonlib/requirements.txt
      
      #autorize org. sfdx command:      
      #vamos usar un access token, por lo que podemos saltarnos este paso
      # statusCode = sh( script: "sfdx force:auth:jwt:grant --clientid ${SFDC_CONSUMER_KEY} -s --jwtkeyfile '${sfdxKey}' --username ${SFDC_USN} --setalias ${env.SFDX_USER_ALIAS} --instanceurl ${env.SFDX_URL} --json > login.json ", returnStatus: true );
      # handleLogin( statusCode );
      
      #generate describe, sfdx command: 
      # statusCode = sh(script: "sfdx force:mdapi:describemetadata -u ${SFDC_USN} -f ${env.PATH_SALESFORCE}/describe.log --apiversion ${env.API_VERSION} --loglevel debug", returnStatus: true);
      - run: sfdx version
      - run: |
          cd ./sfrepo/sfapp
          sfdx force:config:set instanceUrl=https://creative-otter-1qg0q0-dev-ed.my.salesforce.com --global
      #sfdx force:mdapi:describemetadata -u ${{ secrets.SFORG_DEV_IT }} -f ../describe.log --apiversion ${{ inputs.apiversion }} --loglevel debug;
      #Paso 4: build delta
      - run: |
          cd ./sfrepo
          pwd
          python3 ../pythonlib/mergerDX/merger.py merge_delta -s develop -t main -a ${{ inputs.apiversion }} --source-folder sfapp
      #python3 /home/runner/work/TestingSharedPipelines/TestingSharedPipelines/pythonlib/mergerDX/merger.py merge_delta -s develop -t main -a ${{ inputs.apiversion }} --source-folder sfapp
      - run: |
             cd ./sfrepo/sfapp
             ls -aR


#withEnv( [ "PYTHONIOENCODING=UTF-8" ] ){
#  statusCode = sh returnStatus: true, script: "python3 ${env.PATH_SCRIPTS}/mergerDX/merger.py merge_delta -s ${env.gitSourceBranch} -t ${env.gitTargetBranch} -a ${env.API_VERSION} ";
#  }
#Paso 5: ValidateRun
# obtener classes de test a ejecutar y validar si tengo que ejecutar los test
#dir( "${env.PATH_SALESFORCE}/srcToDeploy" ){
#        hasApexClasses    = sh( script: "if [ -d 'classes' ]; then echo 'true'; else echo 'false'; fi", returnStdout: true );
#        hasApexTriggers   = sh( script: "if [ -d 'triggers' ]; then echo 'true'; else echo 'false'; fi", returnStdout: true );
#    }
# ejecutar test
#statusCode = sh( script:"sfdx force:source:deploy -u ${SFDC_USN} -p ${folder} ${testString} --apiversion ${env.API_VERSION} --wait 90 -c --json > validate.json", returnStatus: true );
# Crear artifact del status.json
#archiveArtifacts allowEmptyArchive: true, artifacts: "validate.json", fingerprint: true;
# Generar repo HTML y subirlo como artifact
#sh "python3 ${env.PATH_SCRIPTS}/logParserDX/dxLogParser.py logParser -p validate.json -O validate-Report.html";
#archiveArtifacts allowEmptyArchive: true, artifacts: "validate-Report.html", fingerprint: true;
#Paso 6: Deploy
# si los test han ido bien, ejecutar deploy

# subir deploy.json como artifact






