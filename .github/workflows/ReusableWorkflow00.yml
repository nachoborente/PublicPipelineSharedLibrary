on:
  workflow_call:
    inputs:
      testvar:
        required: true
        type: string
      apiversion:
          required: true
          type: string

jobs:

  TEST001:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    env:
        SalesforcePath: "/nachotest"
    steps:
      - run: |
           pwd
           echo '${{ vars.SFORG_USERNAME }}'
           echo '${{ vars.SFORG_URL }}'
      - name: Checkout code repo
        uses: actions/checkout@v3
        with:
          path: sfrepo
          fetch-depth: 0

    #IGNORE Paso 1 obtener algunos valores desde el contexto, como sourcebranch, destinationbranch, (como estan en el contexto obtenerlas cuando las necesite)
    # configurar git (obtener de las variables grobales)     
      - run: |
          git -v
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git config --global user.email ${{ vars.GIT_EMAIL }}
    
    #Paso 3 install sfdx, install python and requirements, 
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Setup Python
        uses: actions/setup-python@v3.1.4
        with:
          python-version: '3.7' 
      - run: | 
          cd ./sfrepo
          mkdir srcToDeploy
          cd ./srcToDeploy
          mkdir classes
          mkdir triggers
      - run: |
          cd ./sfrepo/srcToDeploy
          if [ -d 'classes' ]; then echo 'hasApexClasses=true' >> '$GITHUB_ENV'; else echo 'hasApexClasses=false' >> '$GITHUB_ENV'; fi
          if [ -d 'classes' ]; then echo 'hasApexTriggers=true' >> '$GITHUB_ENV'; else echo 'hasApexTriggers=false' >> '$GITHUB_ENV'; fi
          test="hola test"
    #PASO 6: VALIDATE VALUE OF ENV VARIBLES
      - run: |
          echo "${{ env.hasApexClasses }}"
          echo "${{ env.hasApexTriggers }}"
          echo $test
    #PASO 7: EJECUTAR TEST VALIDACION
    #PASO 8: CREAR ARTEFACTO validate.json
    #PASO 9: CREAR report html a partir del fichero validate.json
    #PASO 10: SUBIR ARTEFACTO Validate.html
    #PASO 11: SI TODO OK. EJECUTAR DEPLOY
    #PASO 12: SUBIR deploy.json as artifact

# obtener classes de test a ejecutar y validar si tengo que ejecutar los test
#dir( "${env.PATH_SALESFORCE}/srcToDeploy" ){
#        hasApexClasses    = sh( script: "if [ -d 'classes' ]; then echo 'true'; else echo 'false'; fi", returnStdout: true );
#        hasApexTriggers   = sh( script: "if [ -d 'triggers' ]; then echo 'true'; else echo 'false'; fi", returnStdout: true );
#    }
# ejecutar test
#statusCode = sh( script:"sfdx force:source:deploy -u ${SFDC_USN} -p ${folder} ${testString} --apiversion ${env.API_VERSION} --wait 90 -c --json > validate.json", returnStatus: true );
# Crear artifact del status.json
#archiveArtifacts allowEmptyArchive: true, artifacts: "validate.json", fingerprint: true;
# Generar repo HTML y subirlo como artifact
#sh "python3 ${env.PATH_SCRIPTS}/logParserDX/dxLogParser.py logParser -p validate.json -O validate-Report.html";
#archiveArtifacts allowEmptyArchive: true, artifacts: "validate-Report.html", fingerprint: true;
#Paso 6: Deploy
# si los test han ido bien, ejecutar deploy

# subir deploy.json como artifact






